{"ast":null,"code":"var _jsxFileName = \"C:\\\\workspace\\\\react_practice\\\\udemy-projects-again\\\\food-order-app\\\\src\\\\components\\\\Layout\\\\Header.js\",\n  _s = $RefreshSig$();\nimport React, { Fragment, useState } from \"react\";\nimport classes from \"./Header.module.css\";\nimport HeaderCartButton from \"./HeaderCartButton\";\nimport mainImg from \"../../images/meals.jpg\";\nimport Modal from \"../UI/Modal\";\nimport Cart from \"../Cart/Cart\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Header = props => {\n  _s();\n  const totalQuantity = 4;\n\n  /*\r\n  I might also want to have a state for an error modal.\r\n  \r\n  I very well could use a useReducer because we want to \r\n  derive our state based on how many items are in our cart.\r\n  Therefore, we could dispatch an object with a itemsInCart\r\n  field as well as a whichModal field (a field that determines\r\n  which modal to display)\r\n    Then the dispatch function could dispatch an action whose\r\n  type field could forseeably be 'ITEMS_IN_CART' or 'NO_ITEMS_IN_CART'\r\n  and whose value could be true or false.\r\n    Then, in the reducer function, we can check:\r\n  if(action.type === 'ITEMS_IN_CART'){\r\n    return {itemsInCart: '', whichModal: ''}\r\n  }\r\n  */\n  const [isCartVisible, setIsCartVisible] = useState(false);\n  const showCartHandler = () => {\n    if (totalQuantity > 0) {\n      setIsCartVisible(true);\n    }\n  };\n  const hideCartHandler = () => {\n    setIsCartVisible(false);\n  };\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [isCartVisible && /*#__PURE__*/_jsxDEV(Modal, {\n      onClose: hideCartHandler,\n      children: /*#__PURE__*/_jsxDEV(Cart, {\n        onClose: hideCartHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"header\", {\n      className: classes.header,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"ReactMeals\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(HeaderCartButton, {\n        onClick: showCartHandler,\n        totalQuantity: totalQuantity\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes[\"main-image\"],\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: mainImg,\n        alt: \"food laid out on buffet table\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_s(Header, \"7lS85EVBbx2iO+Csvq58RqVZYNU=\");\n_c = Header;\nexport default Header;\nvar _c;\n$RefreshReg$(_c, \"Header\");","map":{"version":3,"names":["React","Fragment","useState","classes","HeaderCartButton","mainImg","Modal","Cart","Header","props","totalQuantity","isCartVisible","setIsCartVisible","showCartHandler","hideCartHandler","header"],"sources":["C:/workspace/react_practice/udemy-projects-again/food-order-app/src/components/Layout/Header.js"],"sourcesContent":["import React, { Fragment, useState } from \"react\";\r\nimport classes from \"./Header.module.css\";\r\nimport HeaderCartButton from \"./HeaderCartButton\";\r\nimport mainImg from \"../../images/meals.jpg\";\r\nimport Modal from \"../UI/Modal\";\r\nimport Cart from \"../Cart/Cart\";\r\n\r\nconst Header = (props) => {\r\n  const totalQuantity = 4;\r\n\r\n  /*\r\n  I might also want to have a state for an error modal.\r\n  \r\n  I very well could use a useReducer because we want to \r\n  derive our state based on how many items are in our cart.\r\n  Therefore, we could dispatch an object with a itemsInCart\r\n  field as well as a whichModal field (a field that determines\r\n  which modal to display)\r\n\r\n  Then the dispatch function could dispatch an action whose\r\n  type field could forseeably be 'ITEMS_IN_CART' or 'NO_ITEMS_IN_CART'\r\n  and whose value could be true or false.\r\n\r\n  Then, in the reducer function, we can check:\r\n  if(action.type === 'ITEMS_IN_CART'){\r\n    return {itemsInCart: '', whichModal: ''}\r\n  }\r\n  */\r\n  const [isCartVisible, setIsCartVisible] = useState(false);\r\n\r\n  const showCartHandler = () => {\r\n    if (totalQuantity > 0) {\r\n      setIsCartVisible(true);\r\n    }\r\n  };\r\n\r\n  const hideCartHandler = () => {\r\n    setIsCartVisible(false);\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      {isCartVisible && (\r\n        <Modal onClose={hideCartHandler}>\r\n          <Cart onClose={hideCartHandler}></Cart>\r\n        </Modal>\r\n      )}\r\n      <header className={classes.header}>\r\n        <h1>ReactMeals</h1>\r\n        <HeaderCartButton\r\n          onClick={showCartHandler}\r\n          totalQuantity={totalQuantity}\r\n        />\r\n      </header>\r\n      <div className={classes[\"main-image\"]}>\r\n        <img src={mainImg} alt=\"food laid out on buffet table\" />\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,QAAQ,QAAQ,OAAO;AACjD,OAAOC,OAAO,MAAM,qBAAqB;AACzC,OAAOC,gBAAgB,MAAM,oBAAoB;AACjD,OAAOC,OAAO,MAAM,wBAAwB;AAC5C,OAAOC,KAAK,MAAM,aAAa;AAC/B,OAAOC,IAAI,MAAM,cAAc;AAAC;AAEhC,MAAMC,MAAM,GAAIC,KAAK,IAAK;EAAA;EACxB,MAAMC,aAAa,GAAG,CAAC;;EAEvB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAGE,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EAEzD,MAAMW,eAAe,GAAG,MAAM;IAC5B,IAAIH,aAAa,GAAG,CAAC,EAAE;MACrBE,gBAAgB,CAAC,IAAI,CAAC;IACxB;EACF,CAAC;EAED,MAAME,eAAe,GAAG,MAAM;IAC5BF,gBAAgB,CAAC,KAAK,CAAC;EACzB,CAAC;EAED,oBACE,QAAC,QAAQ;IAAA,WACND,aAAa,iBACZ,QAAC,KAAK;MAAC,OAAO,EAAEG,eAAgB;MAAA,uBAC9B,QAAC,IAAI;QAAC,OAAO,EAAEA;MAAgB;QAAA;QAAA;QAAA;MAAA;IAAQ;MAAA;MAAA;MAAA;IAAA,QAE1C,eACD;MAAQ,SAAS,EAAEX,OAAO,CAACY,MAAO;MAAA,wBAChC;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAmB,eACnB,QAAC,gBAAgB;QACf,OAAO,EAAEF,eAAgB;QACzB,aAAa,EAAEH;MAAc;QAAA;QAAA;QAAA;MAAA,QAC7B;IAAA;MAAA;MAAA;MAAA;IAAA,QACK,eACT;MAAK,SAAS,EAAEP,OAAO,CAAC,YAAY,CAAE;MAAA,uBACpC;QAAK,GAAG,EAAEE,OAAQ;QAAC,GAAG,EAAC;MAA+B;QAAA;QAAA;QAAA;MAAA;IAAG;MAAA;MAAA;MAAA;IAAA,QACrD;EAAA;IAAA;IAAA;IAAA;EAAA,QACG;AAEf,CAAC;AAAC,GApDIG,MAAM;AAAA,KAANA,MAAM;AAsDZ,eAAeA,MAAM;AAAC;AAAA"},"metadata":{},"sourceType":"module"}