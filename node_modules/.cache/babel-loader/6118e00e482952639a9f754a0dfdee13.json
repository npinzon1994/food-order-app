{"ast":null,"code":"var _jsxFileName = \"C:\\\\workspace\\\\react_practice\\\\udemy-projects-again\\\\food-order-app\\\\src\\\\context\\\\cart-item-context.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartItemContext = /*#__PURE__*/React.createContext({\n  inputValue: 1,\n  cartItem: {},\n  onSetInputValue: () => {}\n});\nexport const CartItemContextProvider = props => {\n  _s();\n  /*\r\n  Right now, we have a state that holds the input value\r\n  for the quantity of the MealItem. \r\n  \r\n  In addition, it would be good to have another state that \r\n  holds the current MealItem from which we want to create a \r\n  CartItem which is accessible in Cart.js\r\n    CartItem props -> name, price, quantity, onRemove, onAdd\r\n  */\n\n  const [inputValue, setInputValue] = useState(1);\n  const inputChangeHandler = event => {\n    setInputValue(event.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(CartItemContext.Provider, {\n    value: {\n      inputValue: inputValue,\n      onSetInputValue: inputChangeHandler\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 12\n  }, this);\n};\n_s(CartItemContextProvider, \"1YhZVcooKZU1mKwuS+wJmQpCIJE=\");\n_c = CartItemContextProvider;\nexport default CartItemContext;\nvar _c;\n$RefreshReg$(_c, \"CartItemContextProvider\");","map":{"version":3,"names":["React","useState","CartItemContext","createContext","inputValue","cartItem","onSetInputValue","CartItemContextProvider","props","setInputValue","inputChangeHandler","event","target","value","children"],"sources":["C:/workspace/react_practice/udemy-projects-again/food-order-app/src/context/cart-item-context.js"],"sourcesContent":["import React, {useState} from \"react\";\r\n\r\nconst CartItemContext = React.createContext({\r\n    inputValue: 1,\r\n    cartItem: {},\r\n    onSetInputValue: () => {}\r\n})\r\n\r\n\r\nexport const CartItemContextProvider = (props) => {\r\n    /*\r\n    Right now, we have a state that holds the input value\r\n    for the quantity of the MealItem. \r\n    \r\n    In addition, it would be good to have another state that \r\n    holds the current MealItem from which we want to create a \r\n    CartItem which is accessible in Cart.js\r\n\r\n    CartItem props -> name, price, quantity, onRemove, onAdd\r\n    */\r\n    \r\n    const[inputValue, setInputValue] = useState(1);\r\n\r\n    const inputChangeHandler = (event) => {\r\n        setInputValue(event.target.value);\r\n    }\r\n    \r\n    return <CartItemContext.Provider value={{\r\n        inputValue: inputValue,\r\n        onSetInputValue: inputChangeHandler\r\n    }}>\r\n        {props.children}\r\n    </CartItemContext.Provider>\r\n}\r\n\r\nexport default CartItemContext;"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,QAAO,OAAO;AAAC;AAEtC,MAAMC,eAAe,gBAAGF,KAAK,CAACG,aAAa,CAAC;EACxCC,UAAU,EAAE,CAAC;EACbC,QAAQ,EAAE,CAAC,CAAC;EACZC,eAAe,EAAE,MAAM,CAAC;AAC5B,CAAC,CAAC;AAGF,OAAO,MAAMC,uBAAuB,GAAIC,KAAK,IAAK;EAAA;EAC9C;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGI,MAAK,CAACJ,UAAU,EAAEK,aAAa,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC;EAE9C,MAAMS,kBAAkB,GAAIC,KAAK,IAAK;IAClCF,aAAa,CAACE,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EACrC,CAAC;EAED,oBAAO,QAAC,eAAe,CAAC,QAAQ;IAAC,KAAK,EAAE;MACpCT,UAAU,EAAEA,UAAU;MACtBE,eAAe,EAAEI;IACrB,CAAE;IAAA,UACGF,KAAK,CAACM;EAAQ;IAAA;IAAA;IAAA;EAAA,QACQ;AAC/B,CAAC;AAAA,GAxBYP,uBAAuB;AAAA,KAAvBA,uBAAuB;AA0BpC,eAAeL,eAAe;AAAC;AAAA"},"metadata":{},"sourceType":"module"}