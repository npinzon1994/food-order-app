{"ast":null,"code":"var _jsxFileName = \"C:\\\\workspace\\\\react_practice\\\\udemy-projects-again\\\\food-order-app\\\\src\\\\context\\\\CartProvider.js\",\n  _s = $RefreshSig$();\nimport { useReducer } from \"react\";\nimport CartContext from \"./cart-context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartState = {\n  items: [],\n  totalPrice: 0\n};\nconst cartReducer = (state, action) => {\n  if (action.type === \"ADD\") {\n    //concat() returns a new array with the argument appended to the end\n    if (state.items.includes(action.item)) {} else {\n      const updatedItems = state.items.concat(action.item);\n    }\n\n    //taking price of current item * its quantity and adding to totalPrice\n    const updatedTotalPrice = state.totalPrice + action.item.price * action.item.quantity;\n    return {\n      items: updatedItems,\n      totalPrice: updatedTotalPrice\n    };\n  }\n  if (action.type === \"REMOVE\") {}\n  return defaultCartState;\n};\nconst CartProvider = props => {\n  _s();\n  //this provides the concrete context object we'll be working with\n\n  /*\r\n    This is where useReducer goes. The action.type will check\r\n    if the current item we're adding is aready in the cart or\r\n    not. If no, we add the item to our items array. If yes, then\r\n    we just update that item's quantity.\r\n    */\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState);\n  const addItemToCartHandler = item => {\n    dispatchCartAction({\n      type: \"ADD\",\n      item: item\n    });\n  };\n  const removeItemFromCartHandler = id => {\n    dispatchCartAction({\n      type: \"REMOVE\",\n      id: id\n    });\n  };\n  const cartContext = {\n    items: cartState.items,\n    totalPrice: cartState.totalPrice,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n_s(CartProvider, \"PxEugEseoIJIbjFwtAJal5z5ClY=\");\n_c = CartProvider;\nexport default CartProvider;\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["useReducer","CartContext","defaultCartState","items","totalPrice","cartReducer","state","action","type","includes","item","updatedItems","concat","updatedTotalPrice","price","quantity","CartProvider","props","cartState","dispatchCartAction","addItemToCartHandler","removeItemFromCartHandler","id","cartContext","addItem","removeItem","children"],"sources":["C:/workspace/react_practice/udemy-projects-again/food-order-app/src/context/CartProvider.js"],"sourcesContent":["import { useReducer } from \"react\";\r\nimport CartContext from \"./cart-context\";\r\n\r\nconst defaultCartState = {\r\n  items: [],\r\n  totalPrice: 0,\r\n};\r\n\r\nconst cartReducer = (state, action) => {\r\n  if (action.type === \"ADD\") {\r\n    //concat() returns a new array with the argument appended to the end\r\n    if(state.items.includes(action.item)){\r\n\r\n    } else {\r\n      const updatedItems = state.items.concat(action.item);\r\n    }\r\n    \r\n\r\n    //taking price of current item * its quantity and adding to totalPrice\r\n    const updatedTotalPrice =\r\n      state.totalPrice + action.item.price * action.item.quantity;\r\n\r\n    return { items: updatedItems, totalPrice: updatedTotalPrice };\r\n  }\r\n\r\n  if (action.type === \"REMOVE\") {\r\n  }\r\n\r\n  return defaultCartState;\r\n};\r\n\r\nconst CartProvider = (props) => {\r\n  //this provides the concrete context object we'll be working with\r\n\r\n  /*\r\n    This is where useReducer goes. The action.type will check\r\n    if the current item we're adding is aready in the cart or\r\n    not. If no, we add the item to our items array. If yes, then\r\n    we just update that item's quantity.\r\n    */\r\n  const [cartState, dispatchCartAction] = useReducer(\r\n    cartReducer,\r\n    defaultCartState\r\n  );\r\n\r\n  const addItemToCartHandler = (item) => {\r\n    dispatchCartAction({ type: \"ADD\", item: item });\r\n  };\r\n\r\n  const removeItemFromCartHandler = (id) => {\r\n    dispatchCartAction({ type: \"REMOVE\", id: id });\r\n  };\r\n\r\n  const cartContext = {\r\n    items: cartState.items,\r\n    totalPrice: cartState.totalPrice,\r\n    addItem: addItemToCartHandler,\r\n    removeItem: removeItemFromCartHandler,\r\n  };\r\n\r\n  return (\r\n    <CartContext.Provider value={cartContext}>\r\n      {props.children}\r\n    </CartContext.Provider>\r\n  );\r\n};\r\n\r\nexport default CartProvider;\r\n"],"mappings":";;AAAA,SAASA,UAAU,QAAQ,OAAO;AAClC,OAAOC,WAAW,MAAM,gBAAgB;AAAC;AAEzC,MAAMC,gBAAgB,GAAG;EACvBC,KAAK,EAAE,EAAE;EACTC,UAAU,EAAE;AACd,CAAC;AAED,MAAMC,WAAW,GAAG,CAACC,KAAK,EAAEC,MAAM,KAAK;EACrC,IAAIA,MAAM,CAACC,IAAI,KAAK,KAAK,EAAE;IACzB;IACA,IAAGF,KAAK,CAACH,KAAK,CAACM,QAAQ,CAACF,MAAM,CAACG,IAAI,CAAC,EAAC,CAErC,CAAC,MAAM;MACL,MAAMC,YAAY,GAAGL,KAAK,CAACH,KAAK,CAACS,MAAM,CAACL,MAAM,CAACG,IAAI,CAAC;IACtD;;IAGA;IACA,MAAMG,iBAAiB,GACrBP,KAAK,CAACF,UAAU,GAAGG,MAAM,CAACG,IAAI,CAACI,KAAK,GAAGP,MAAM,CAACG,IAAI,CAACK,QAAQ;IAE7D,OAAO;MAAEZ,KAAK,EAAEQ,YAAY;MAAEP,UAAU,EAAES;IAAkB,CAAC;EAC/D;EAEA,IAAIN,MAAM,CAACC,IAAI,KAAK,QAAQ,EAAE,CAC9B;EAEA,OAAON,gBAAgB;AACzB,CAAC;AAED,MAAMc,YAAY,GAAIC,KAAK,IAAK;EAAA;EAC9B;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,MAAM,CAACC,SAAS,EAAEC,kBAAkB,CAAC,GAAGnB,UAAU,CAChDK,WAAW,EACXH,gBAAgB,CACjB;EAED,MAAMkB,oBAAoB,GAAIV,IAAI,IAAK;IACrCS,kBAAkB,CAAC;MAAEX,IAAI,EAAE,KAAK;MAAEE,IAAI,EAAEA;IAAK,CAAC,CAAC;EACjD,CAAC;EAED,MAAMW,yBAAyB,GAAIC,EAAE,IAAK;IACxCH,kBAAkB,CAAC;MAAEX,IAAI,EAAE,QAAQ;MAAEc,EAAE,EAAEA;IAAG,CAAC,CAAC;EAChD,CAAC;EAED,MAAMC,WAAW,GAAG;IAClBpB,KAAK,EAAEe,SAAS,CAACf,KAAK;IACtBC,UAAU,EAAEc,SAAS,CAACd,UAAU;IAChCoB,OAAO,EAAEJ,oBAAoB;IAC7BK,UAAU,EAAEJ;EACd,CAAC;EAED,oBACE,QAAC,WAAW,CAAC,QAAQ;IAAC,KAAK,EAAEE,WAAY;IAAA,UACtCN,KAAK,CAACS;EAAQ;IAAA;IAAA;IAAA;EAAA,QACM;AAE3B,CAAC;AAAC,GAlCIV,YAAY;AAAA,KAAZA,YAAY;AAoClB,eAAeA,YAAY;AAAC;AAAA"},"metadata":{},"sourceType":"module"}